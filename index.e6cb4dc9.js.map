{"mappings":"ACEA,SAAS,gBAAgB,CAAC,mBAAoB,WAG5C,IAAM,EAAY,SAAS,aAAa,CAAC,eACnC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAQ,SAAS,aAAa,CAAC,UAE/B,EAAgB,WACpB,IAAM,EAAO,EAAM,IAAI,CAAC,MAAM,CACxB,EAAU,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE1C,CAAA,EAAU,QAAQ,CAAG,GAZN,GAaf,EAAU,QAAQ,CAAG,GAZN,EAaf,EAAa,QAAQ,CAAG,GAdT,GAef,EAAa,QAAQ,CAAG,GAdT,CAejB,EAmDA,EAAU,gBAAgB,CAAC,QAjDZ,WAGb,GAAI,AAFS,EAAM,IAAI,CAAC,MAAM,CAnBf,GAqBM,CAInB,IAAK,IAHC,EAAU,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CACpC,EAAS,EAAM,SAAS,GAErB,EAAI,EAAG,EAAI,EAAS,IAC3B,EAAO,UAAU,GAGnB,GACF,CACF,GAqCA,EAAU,gBAAgB,CAAC,QAnCZ,WACT,EAAM,IAAI,CAAC,MAAM,CAjCN,IAkCb,EAAM,SAAS,CAAC,IAEhB,IAEJ,GA8BA,EAAa,gBAAgB,CAAC,QA5BZ,WAGhB,GAAI,AAFY,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CA1C3B,GA4CS,CACtB,IAAM,EAAO,EAAM,IAAI,CAElB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,E,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,GACF,CACF,GAiBA,EAAa,gBAAgB,CAAC,QAfZ,WAChB,IAAM,EAAO,EAAM,IAAI,CAEvB,GAAI,CAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAzDT,EAyDsB,CAC9B,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,GACF,CACF,EAMF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var maxCount = 10;\n    var minCount = 2;\n    var appendRow = document.querySelector(\".append-row\");\n    var removeRow = document.querySelector(\".remove-row\");\n    var appendColumn = document.querySelector(\".append-column\");\n    var removeColumn = document.querySelector(\".remove-column\");\n    var table = document.querySelector(\".field\");\n    var updateButtons = function() {\n        var rows = table.rows.length;\n        var columns = table.rows[0].cells.length;\n        appendRow.disabled = rows >= maxCount;\n        removeRow.disabled = rows <= minCount;\n        appendColumn.disabled = columns >= maxCount;\n        removeColumn.disabled = columns <= minCount;\n    };\n    var addRow = function() {\n        var rows = table.rows.length;\n        if (rows < maxCount) {\n            var columns = table.rows[0].cells.length;\n            var newRow = table.insertRow();\n            for(var i = 0; i < columns; i++)newRow.insertCell();\n            updateButtons();\n        }\n    };\n    var remRow = function() {\n        if (table.rows.length > minCount) {\n            table.deleteRow(-1);\n            updateButtons();\n        }\n    };\n    var addColumn = function() {\n        var columns = table.rows[0].cells.length;\n        if (columns < maxCount) {\n            var rows = table.rows;\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var row = _step.value;\n                    row.insertCell();\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n            updateButtons();\n        }\n    };\n    var remColumn = function() {\n        var rows = table.rows;\n        if (rows[0].cells.length > minCount) {\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var row = _step.value;\n                    row.deleteCell(-1);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n            updateButtons();\n        }\n    };\n    appendRow.addEventListener(\"click\", addRow);\n    removeRow.addEventListener(\"click\", remRow);\n    appendColumn.addEventListener(\"click\", addColumn);\n    removeColumn.addEventListener(\"click\", remColumn);\n});\n\n//# sourceMappingURL=index.e6cb4dc9.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const maxCount = 10;\n  const minCount = 2;\n  const appendRow = document.querySelector('.append-row');\n  const removeRow = document.querySelector('.remove-row');\n  const appendColumn = document.querySelector('.append-column');\n  const removeColumn = document.querySelector('.remove-column');\n  const table = document.querySelector('.field');\n\n  const updateButtons = () => {\n    const rows = table.rows.length;\n    const columns = table.rows[0].cells.length;\n\n    appendRow.disabled = rows >= maxCount;\n    removeRow.disabled = rows <= minCount;\n    appendColumn.disabled = columns >= maxCount;\n    removeColumn.disabled = columns <= minCount;\n  };\n\n  const addRow = () => {\n    const rows = table.rows.length;\n\n    if (rows < maxCount) {\n      const columns = table.rows[0].cells.length;\n      const newRow = table.insertRow();\n\n      for (let i = 0; i < columns; i++) {\n        newRow.insertCell();\n      }\n\n      updateButtons();\n    }\n  };\n\n  const remRow = () => {\n    if (table.rows.length > minCount) {\n      table.deleteRow(-1);\n\n      updateButtons();\n    }\n  };\n\n  const addColumn = () => {\n    const columns = table.rows[0].cells.length;\n\n    if (columns < maxCount) {\n      const rows = table.rows;\n\n      for (const row of rows) {\n        row.insertCell();\n      }\n\n      updateButtons();\n    }\n  };\n\n  const remColumn = () => {\n    const rows = table.rows;\n\n    if (rows[0].cells.length > minCount) {\n      for (const row of rows) {\n        row.deleteCell(-1);\n      }\n\n      updateButtons();\n    }\n  };\n\n  appendRow.addEventListener('click', addRow);\n  removeRow.addEventListener('click', remRow);\n  appendColumn.addEventListener('click', addColumn);\n  removeColumn.addEventListener('click', remColumn);\n});\n"],"names":["document","addEventListener","appendRow","querySelector","removeRow","appendColumn","removeColumn","table","updateButtons","rows","length","columns","cells","disabled","newRow","insertRow","i","insertCell","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.e6cb4dc9.js.map"}